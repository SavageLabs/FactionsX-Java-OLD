package io.illyria.factionsx.entity;

import io.illyria.factionsx.FactionsX;
import io.illyria.factionsx.config.Config;
import io.illyria.factionsx.core.Role;
import io.illyria.factionsx.core.relation.Relation;
import io.illyria.factionsx.core.relation.RelationParticipator;

import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

public class Faction implements IFaction {

    private String id;
    private String name;
    private String description;
    private Set<String> rules;
    private long foundedDate;
    private boolean open;
    private Set<String> announcements;
    private int maxMemberSize;
    private double power;
    private double maxPower;
    private Set<IFPlayer> mutedPlayers;
    private Set<IFPlayer> bannedPlayers;
    private Set<IFPlayer> factionPlayers;
    private String factionOwnerId;
    private Map<RelationParticipator, Relation> pendingRelationRequests;
    private Map<RelationParticipator, Relation> relations;
    private Map<RelationParticipator, Relation> relationsWish;
    private Set<IFPlayer> invites;

    public Faction() {}

    public Faction(String id, String factionName, String factionOwnerId) {

        this.id = id; //TODO: ID generated by FactionManager class
        this.name = factionName;
        this.factionOwnerId = factionOwnerId;
        this.description = Config.FACTION_DEFAULT_DESCRIPTION.getString();
        this.foundedDate = System.currentTimeMillis();
        this.open = Config.FACTION_DEFAULT_OPEN.getBoolean();
        this.power = Config.FACTION_DEFAULT_STARTINGPOWER.getDouble();
        this.maxPower = Config.FACTION_DEFAULT_MAXPOWER.getDouble();
        this.maxMemberSize = Config.FACTION_DEFAULT_MAXMEMBERSIZE.getInt();

    }

    @Override
    public String getId() {
        return id;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public long getFoundedDate() {
        return foundedDate;
    }

    @Override
    public String getDescription() {
        return description;
    }

    @Override
    public void setDescription(String description) {
        this.description = description;
    }

    @Override
    public Set<String> getRules() {
        return rules;
    }

    @Override
    public void addRule(String rule) {
        this.rules.add(rule);
    }

    @Override
    public void removeRule(String rule) {
        this.rules.remove(rule);
    }

    @Override
    public void removeRules() {
        this.rules.clear();
    }

    @Override
    public boolean getOpen() {
        return open;
    }

    @Override
    public void setOpen(boolean open) {
        this.open = open;
    }

    @Override
    public Set<String> getAnnouncements() {
        return announcements;
    }

    @Override
    public void addAnouncement(String announcementMsg) {
        this.announcements.add(announcementMsg);
    }

    @Override
    public void removeAnnouncement(String announcementId) {
        this.announcements.remove(announcementId);
    }

    @Override
    public void removeAnnouncements() {
        this.announcements.clear();
    }

    @Override
    public double getPower() {
        return power;
    }

    @Override
    public void setPower(double power) {
        this.power = power;
    }

    @Override
    public void setMaxPower(double maxPower) {
        this.maxPower = maxPower;
    }

    @Override
    public boolean isSystemFaction() {
        return false;
    }

    @Override
    public void invitePlayer(IFPlayer player) {
        this.invites.add(player);
    }

    @Override
    public void uninvitePlayer(IFPlayer player) {
        this.invites.remove(player);
    }

    @Override
    public Set<IFPlayer> getInvites() {
        return invites;
    }

    @Override
    public boolean isInvited(IFPlayer player) {
        return invites.contains(player);
    }

    @Override
    public void kickPlayer(IFPlayer player) {
        this.factionPlayers.remove(player);
        this.invites.remove(player);
    }

    @Override
    public void banPlayer(IFPlayer player) {
        if (bannedPlayers.contains(player)) {
            //TODO...
        } else {
            kickPlayer(player);
            this.getBannedPlayers().add(player);
        }
    }

    @Override
    public void mutePlayer(IFPlayer player) {
        this.mutedPlayers.add(player);
    }

    @Override
    public void unmutePlayer(IFPlayer player) {
        this.mutedPlayers.remove(player);
    }

    @Override
    public void muteAllPlayers() {
        this.mutedPlayers.addAll(factionPlayers);
    }

    @Override
    public void unmuteAllPlayers() {
        this.mutedPlayers.clear();
    }

    @Override
    public void unbanPlayer(IFPlayer player) {
        this.bannedPlayers.remove(player);
    }

    @Override
    public boolean isBanned(IFPlayer player) {
        return bannedPlayers.contains(player);
    }

    @Override
    public Set<IFPlayer> getBannedPlayers() {
        return bannedPlayers;
    }

    @Override
    public void addPlayer(IFPlayer player) {
        this.factionPlayers.add(player);
    }

    @Override
    public void removePlayer(IFPlayer player) {
        this.factionPlayers.remove(player);
    }

    @Override
    public Set<IFPlayer> getPlayers() {
        return factionPlayers;
    }

    @Override
    public int getMemberSize() {
        return factionPlayers.size();
    }

    @Override
    public int getMaxMemberSize() {
        return maxMemberSize;
    }

    @Override
    public void setMaxMemberSize(int size) {
        this.maxMemberSize = size;
    }

    @Override
    public IFPlayer getLeader() {
        return FactionsX.getFactionsX().getPlayerManager().getById(factionOwnerId);
    }

    @Override
    public Set<IFPlayer> getPlayersWithRole(Role role) {

        Set<IFPlayer> playerResult = new HashSet<>();

        for (IFPlayer player : factionPlayers) {

            if (player.getRole().equals(role)) {
                playerResult.add(player);
            }

        }
        return playerResult;
    }

    @Override
    public void setPlayerRole(IFPlayer player, Role role) {
        for (IFPlayer fplayer : factionPlayers) {
            if (fplayer.equals(player) && fplayer.getFaction().equals(this)) {
                player.setRole(role);
            }
        }
    }

    @Override
    public void sendRelationRequest(RelationParticipator relationParticipator, Relation relation) {
        relationParticipator.getPendingRelationRequests().put(this, relation);
        relationsWish.put(relationParticipator, relation);
    }

    @Override
    public Map<RelationParticipator, Relation> getPendingRelationRequests() {
        return pendingRelationRequests;
    }

    @Override
    public Map<RelationParticipator, Relation> getRelations() {
        return relations;
    }

    @Override
    public Map<RelationParticipator, Relation> getRelationsWish() {
        return relationsWish;
    }

    @Override
    public Relation getRelationTo(RelationParticipator relationParticipator) {
        return relations.get(relationParticipator);
    }

    @Override
    public Set<RelationParticipator> getFactionsWithRelation(Relation relation) {

        Set<RelationParticipator> factionsResult = new HashSet<>();

        for (RelationParticipator relationParticipator : relations.keySet()) {
            if (this.getRelationTo(relationParticipator).equals(relation)) {
                factionsResult.add(relationParticipator);
            }
        }
        return factionsResult;
    }

    @Override
    public void setRelation(RelationParticipator relationParticipator, Relation relation) {
        this.relations.put(relationParticipator, relation);
        relationParticipator.getRelations().put(relationParticipator, relation);
    }

    @Override
    public int getRelationCount() {
        return relations.size();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Faction faction = (Faction) o;
        return id.equals(faction.id) &&
                name.equals(faction.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name);
    }
}
